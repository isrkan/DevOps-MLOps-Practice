version: '1.0'

services:
  # Spring Boot service
  expenses:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8082:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/template1
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres1
    # Optional: Networks can be defined to isolate services
    networks:
      - monitoring

  # PostgreSQL service
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=expenses
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres1
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring

  # cAdvisor service to monitor Docker containers
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8083:8080"  # Expose cAdvisor metrics on port 8081
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring

  # Prometheus service to scrape metrics from cAdvisor and the Spring Boot app
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Expose Prometheus on port 9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    depends_on:
      - cadvisor
      - expenses

  # Grafana service for visualizing Prometheus metrics
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # Grafana default port
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # Default Grafana admin username
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default Grafana admin password
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning  # Mount provisioning directory
    networks:
      - monitoring
    depends_on:
      - prometheus

# Define named volumes for persistent storage
volumes:
  postgres_data:
  grafana-storage:  # Define Grafana volume here

# Define the network for inter-container communication
networks:
  monitoring: